# -*- coding: utf-8 -*-
"""Evaluation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TmcQOP_6LckqUhClyE2JyiLy6Vay95U1
"""

import pandas as pd
import numpy as np
import torch
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, classification_report
from transformers import BertTokenizer, BertForSequenceClassification, Trainer, TrainingArguments
from torch.utils.data import Dataset, DataLoader

# Load the labeled unsure dataset
df = pd.read_csv("/content/drive/My Drive/project/relabelled_unsure_dataset.csv")

# Split dataset into train (70%), val (15%), test (15%)
train_texts, test_texts, train_labels, test_labels = train_test_split(
    df["Translated_Text"], df["Label"], test_size=0.3, random_state=42, stratify=df["Label"]
)

val_texts, test_texts, val_labels, test_labels = train_test_split(
    test_texts, test_labels, test_size=0.5, random_state=42, stratify=test_labels
)

print(f"Train size: {len(train_texts)}, Val size: {len(val_texts)}, Test size: {len(test_texts)}")

"""**Machine Learning Models**"""

# Convert text to TF-IDF features
vectorizer = TfidfVectorizer(max_features=5000)
X_train = vectorizer.fit_transform(train_texts)
X_val = vectorizer.transform(val_texts)
X_test = vectorizer.transform(test_texts)

# Convert string labels to numerical (bully = 1, not bully = 0)
label_mapping = {"bully": 1, "not bully": 0}
train_labels = train_labels.map(label_mapping)
val_labels = val_labels.map(label_mapping)
test_labels = test_labels.map(label_mapping)

# Train and evaluate multiple ML models
ml_models = {
    "Logistic Regression": LogisticRegression(),
    "SVM": SVC(),
    "Random Forest": RandomForestClassifier(),
    "XGBoost": XGBClassifier(use_label_encoder=False, eval_metric='logloss')
}

for name, model in ml_models.items():
    model.fit(X_train, train_labels)
    y_pred = model.predict(X_test)
    acc = accuracy_score(test_labels, y_pred)
    print(f"{name} Accuracy: {acc:.4f}")
    print(classification_report(test_labels, y_pred))

"""**Deep Learning Model (BERT)**"""

# Tokenization for BERT
tokenizer = BertTokenizer.from_pretrained("bert-base-uncased")

class CyberbullyingDataset(Dataset):
    def __init__(self, texts, labels):
        self.encodings = tokenizer(list(texts), truncation=True, padding=True, max_length=128, return_tensors="pt")
        self.labels = torch.tensor(labels.values)

    def __len__(self):
        return len(self.labels)

    def __getitem__(self, idx):
        item = {key: val[idx] for key, val in self.encodings.items()}
        item["labels"] = self.labels[idx]
        return item

# Convert data into dataset format
train_dataset = CyberbullyingDataset(train_texts, train_labels)
val_dataset = CyberbullyingDataset(val_texts, val_labels)
test_dataset = CyberbullyingDataset(test_texts, test_labels)

# Load Pretrained BERT Model
model = BertForSequenceClassification.from_pretrained("bert-base-uncased",
                                                      num_labels=2,
                                                      hidden_dropout_prob=0.3,  # Increase dropout (default 0.1)
                                                      attention_probs_dropout_prob=0.3)

device = "cuda" if torch.cuda.is_available() else "cpu"
model.to(device)

# Training arguments
training_args = TrainingArguments(
    output_dir="./results",
    evaluation_strategy="epoch",
    save_strategy="epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=16,
    per_device_eval_batch_size=16,
    num_train_epochs=5,
    weight_decay=0.01,
    logging_dir="./logs",
    logging_steps=10,
    report_to="none",
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=val_dataset,
)

print(device)  # Should print 'cuda' if running on GPU
print(next(model.parameters()).device)  # Should print 'cuda:0'

import os
os.environ["WANDB_DISABLED"] = "true"

from transformers import TrainerCallback

class EarlyStoppingCallback(TrainerCallback):
    def __init__(self, patience=2):
        self.patience = patience
        self.best_loss = float("inf")
        self.epochs_no_improve = 0

    def on_evaluate(self, args, state, control, metrics, **kwargs):
        if metrics["eval_loss"] < self.best_loss:
            self.best_loss = metrics["eval_loss"]
            self.epochs_no_improve = 0
        else:
            self.epochs_no_improve += 1
            if self.epochs_no_improve >= self.patience:
                control.should_training_stop = True

trainer.add_callback(EarlyStoppingCallback(patience=3))

# Train the model
trainer.train()

# Evaluate on test set
predictions = trainer.predict(test_dataset)
y_pred_dl = np.argmax(predictions.predictions, axis=1)

# Print evaluation metrics
acc_dl = accuracy_score(test_labels, y_pred_dl)
print(f"\nBERT Model Accuracy: {acc_dl:.4f}")
print(classification_report(test_labels, y_pred_dl))

"""**Saving the model**"""

import torch

# Define the path where the model will be saved
save_directory = "/content/drive/My Drive/project/bert_cyberbullying_model"  # Change this to your preferred path

# Save the fine-tuned model and tokenizer
model.save_pretrained(save_directory)
tokenizer.save_pretrained(save_directory)

print(f"Model saved to {save_directory}")

"""**To test My model**"""

import torch
from transformers import AutoTokenizer, AutoModelForSequenceClassification

# Load the fine-tuned model and tokenizer
model_path = "path_to_your_finetuned_model"  # Change this to your actual model path
tokenizer = AutoTokenizer.from_pretrained(model_path)
model = AutoModelForSequenceClassification.from_pretrained(model_path)

# Function to predict bullying content
def predict_text(text):
    model.eval()  # Set model to evaluation mode
    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True, max_length=512)

    with torch.no_grad():  # No need to compute gradients
        outputs = model(**inputs)

    logits = outputs.logits
    predicted_class = torch.argmax(logits, dim=1).item()

    label_map = {0: "Not Bully", 1: "Bully"}  # Adjust based on your dataset labels
    return label_map[predicted_class]

# Test the function
sample_text = "You are so stupid and worthless!"  # Example input
prediction = predict_text(sample_text)
print(f"Predicted Label: {prediction}")